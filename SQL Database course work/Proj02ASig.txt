// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/Adder16.hdl

/**
 * Adds two 16-bit values.
 * The most significant carry bit is ignored.
 */

CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
	HalfAdder(a=a[0],b=b[0],sum=out[0],carry=aa);
	FullAdder(a=a[1],b=b[1],c=aa,sum=out[1],carry=bb);
	FullAdder(a=a[2],b=b[2],c=bb,sum=out[2],carry=cc);
	FullAdder(a=a[3],b=b[3],c=cc,sum=out[3],carry=dd);
	FullAdder(a=a[4],b=b[4],c=dd,sum=out[4],carry=ee);
	FullAdder(a=a[5],b=b[5],c=ee,sum=out[5],carry=ff);
	FullAdder(a=a[6],b=b[6],c=ff,sum=out[6],carry=gg);
	FullAdder(a=a[7],b=b[7],c=gg,sum=out[7],carry=hh);
	FullAdder(a=a[8],b=b[8],c=hh,sum=out[8],carry=ii);
	FullAdder(a=a[9],b=b[9],c=ii,sum=out[9],carry=jj);
	FullAdder(a=a[10],b=b[10],c=jj,sum=out[10],carry=kk);
	FullAdder(a=a[11],b=b[11],c=kk,sum=out[11],carry=ll);
	FullAdder(a=a[12],b=b[12],c=ll,sum=out[12],carry=mm);
	FullAdder(a=a[13],b=b[13],c=mm,sum=out[13],carry=nn);
	FullAdder(a=a[14],b=b[14],c=nn,sum=out[14],carry=oo);
	FullAdder(a=a[15],b=b[15],c=oo,sum=out[15],carry=pp);
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
	//zeroing & negating x nx zx
	Mux16(a=x,b=false,sel=zx,out=xout);
	Not16(in=xout,out=notxout);
	Mux16(a=xout,b=notxout,sel=nx,out=chosex);
	
	//zeroing &negating y ny zy
	Mux16(a=y,b=false,sel=zy,out=yout);
	Not16(in=yout,out=notyout);
	Mux16(a=yout,b=notyout,sel=ny,out=chosey);
	
	//adder & and f
	And16(a=chosex,b=chosey,out=Andxy);
	Add16(a=chosex,b=chosey,out=xplusy);
	Mux16(a=Andxy,b=xplusy,sel=f,out=outa);
	
	//neg out   no
	Not16(in=outa,out=notouta);
	Mux16(a=outa,b=notouta,sel=no,out=out,out[0..7]=ora,out[8..15]=orb,out[15]=nbit);
	

	//zero output zr
	Or8Way(in=ora,out=or1);
	Or8Way(in=orb,out=or2);
	Or(a=or1,b=or2,out=z);
	Not(in=z,out=zr);
	
	//is negative ng
	Or(a=nbit,b=false,out=ng);
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/FullAdder.hdl

/**
 * Computes the sum of three bits.
 */

CHIP FullAdder {
    IN a, b, c;  // 1-bit inputs
    OUT sum,     // Right bit of a + b + c
        carry;   // Left bit of a + b + c

    PARTS:
    And(a=a,b=b,out=outa);
	And(a=a,b=c,out=outb);
	And(a=b,b=c,out=outc);
	Or(a=outa,b=outb,out=x);
	Or(a=x,b=outc,out=carry);
	Xor(a=a,b=b,out=y);
	Xor(a=y,b=c,out=sum);
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/HalfAdder.hdl

/**
 * Computes the sum of two bits.
 */

CHIP HalfAdder {
    IN a, b;    // 1-bit inputs
    OUT sum,    // Right bit of a + b 
        carry;  // Left bit of a + b

    PARTS:
    And(a=a,b=b,out=carry);
	Xor(a=a,b=b,out=sum);
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of bomputing Systems"
// by Nisan and Sbhobken, MIT Press.
// File name: projects/02/Inb16.hdl

/**
 * 16-bit incrementer:
 * out = in + 1 (arithmetic addition)
 */

CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
	HalfAdder(a=in[0],bb=1,sum=out[0],carry=aa);
	HalfAdder(a=in[1],b=aa,sum=out[1],carry=bb);
	HalfAdder(a=in[2],b=bb,sum=out[2],carry=cc);
	HalfAdder(a=in[3],b=cc,sum=out[3],carry=dd);
	HalfAdder(a=in[4],b=dd,sum=out[4],carry=ee);
	HalfAdder(a=in[5],b=ee,sum=out[5],carry=ff);
	HalfAdder(a=in[6],b=ff,sum=out[6],carry=gg);
	HalfAdder(a=in[7],b=gg,sum=out[7],carry=hh);
	HalfAdder(a=in[8],b=hh,sum=out[8],carry=ii);
	HalfAdder(a=in[9],b=ii,sum=out[9],carry=jj);
	HalfAdder(a=in[10],b=jj,sum=out[10],carry=kk);
	HalfAdder(a=in[11],b=kk,sum=out[11],carry=ll);
	HalfAdder(a=in[12],b=ll,sum=out[12],carry=mm);
	HalfAdder(a=in[13],b=mm,sum=out[13],carry=nn);
	HalfAdder(a=in[14],b=nn,sum=out[14],carry=oo);
	HalfAdder(a=in[15],b=oo,sum=out[15],carry=pp);
}